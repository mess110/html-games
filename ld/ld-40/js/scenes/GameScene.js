// Generated by CoffeeScript 1.12.7
var GameScene, Hammer, Mole,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hammer = (function(superClass) {
  extend(Hammer, superClass);

  function Hammer() {
    Hammer.__super__.constructor.call(this);
    this.mesh = JsonModelManager.clone('hammer');
    this.setOpacity(0);
    this.hitting = false;
  }

  Hammer.prototype.hit = function(intersection) {
    var duration, moleId, point;
    if (this.hitting) {
      return;
    }
    point = intersection.point;
    moleId = intersection.object.moleId;
    this.hitting = true;
    this.mesh.position.set(point.x, point.y + 3, point.z + 7);
    duration = 500;
    Helper.tween({
      duration: duration,
      mesh: this.mesh,
      kind: 'Elastic',
      direction: 'Out',
      target: {
        rX: -Math.PI / 2 + 0.2
      }
    }).start();
    new FadeModifier(this, 0, 0.5, 200).start();
    setTimeout((function(_this) {
      return function() {
        var gameScene, mole;
        SoundManager.play('hit');
        gameScene = Hodler.item('gameScene');
        mole = gameScene.moles.filter(function(e) {
          return e.moleId === moleId;
        }).first();
        if (mole.hittable) {
          gameScene.score += 1;
          return gameScene.updateScore();
        }
      };
    })(this), duration / 3);
    return setTimeout((function(_this) {
      return function() {
        new FadeModifier(_this, 0.5, 0, 200).start();
        Helper.tween({
          duration: duration / 2,
          kind: 'Cubic',
          direction: 'Out',
          mesh: _this.mesh,
          target: {
            rX: 0
          }
        }).start();
        return setTimeout(function() {
          return _this.hitting = false;
        }, duration / 2);
      };
    })(this), duration);
  };

  return Hammer;

})(BaseModel);

Mole = (function(superClass) {
  extend(Mole, superClass);

  function Mole(moleId) {
    var light;
    Mole.__super__.constructor.call(this);
    this.moleId = moleId;
    this.hittable = false;
    this.mesh = new THREE.Object3D();
    this.mesh.moleId = moleId;
    this.mole = JsonModelManager.clone('mole');
    this.mole.moleId = moleId;
    this.mole.position.y = -3;
    this.rumble = JsonModelManager.clone('rumble');
    this.rumble.rotation.y = Helper.random(0, Math.PI);
    this.rumble.moleId = moleId;
    light = Helper.pointLight({
      distance: 10
    });
    light.position.set(0, 5, 0);
    Hodler.add("light" + moleId, light);
    this.mesh.add(light);
    this.mesh.add(this.rumble);
    this.mesh.add(this.mole);
  }

  Mole.prototype.appear = function() {
    var duration, pos, stay;
    if (this.hittable) {
      return;
    }
    this.hittable = true;
    duration = 500;
    stay = 500;
    pos = LoadingScene.LOADING_OPTIONS.camera.position.clone();
    pos.y -= 10;
    this.mole.lookAt(pos);
    Helper.tween({
      duration: duration,
      mesh: this.mole,
      kind: 'Elastic',
      direction: 'Out',
      target: {
        y: 0
      }
    }).start();
    if (Hodler.item('gameScene').finished) {
      return;
    }
    SoundManager.volume('pop1', 0.1);
    SoundManager.play('pop1');
    return setTimeout((function(_this) {
      return function() {
        Helper.tween({
          duration: duration,
          mesh: _this.mole,
          kind: 'Elastic',
          direction: 'Out',
          target: {
            y: -3
          }
        }).start();
        return setTimeout(function() {
          return _this.hittable = false;
        }, duration / 2);
      };
    })(this), duration + stay);
  };

  return Mole;

})(BaseModel);

GameScene = (function(superClass) {
  extend(GameScene, superClass);

  function GameScene() {
    return GameScene.__super__.constructor.apply(this, arguments);
  }

  GameScene.prototype.init = function(options) {
    var camera, engine, i, j, k, l, mole, moleId, nature, plane;
    this.score = 0;
    this.timer = 10;
    this.updateScore();
    window.score.style.visibility = '';
    window.time.style.visibility = '';
    Utils.addCEButton({
      size: '32px',
      padding: '30px',
      position: 'bottom-right',
      type: 'reinit'
    });
    camera = LoadingScene.LOADING_OPTIONS.camera;
    camera.position.set(0, 16, 16);
    camera.lookAt(Helper.zero);
    this.tweenMoveTo({
      position: new THREE.Vector3(0, 11, 11)
    }, camera, 4000, TWEEN.Easing.Quartic.Out);
    SoundManager.play('hammer-time');
    engine = Hodler.item('engine');
    engine.setClearColor('#2d882d');
    plane = Helper.plane({
      size: 30,
      color: '#2d882d'
    });
    plane.rotation.x = -Math.PI / 2;
    this.scene.add(plane);
    this.scene.add(Helper.ambientLight());
    this.scene.add(Helper.ambientLight());
    Hodler.item('afterEffects').enable(this.scene, camera);
    nature = this.jmm.clone('nature');
    this.scene.add(nature);
    this.moles = [];
    moleId = -1;
    for (i = k = 0; k <= 2; i = ++k) {
      for (j = l = 0; l <= 2; j = ++l) {
        moleId += 1;
        mole = new Mole(moleId);
        mole.mesh.position.set(-4 + 4 * i, 0, -4 + 4 * j);
        this.moles.push(mole);
        this.scene.add(mole.mesh);
      }
    }
    this.hammer = new Hammer();
    this.scene.add(this.hammer.mesh);
    return this.popGoesThe = setInterval((function(_this) {
      return function() {
        var moles, tMole;
        moles = _this.moles.filter(function(e) {
          return e.hittable === false;
        });
        tMole = moles.shuffle().first();
        if (tMole != null) {
          return tMole.appear();
        }
      };
    })(this), 500);
  };

  GameScene.prototype.uninit = function() {
    window.score.style.visibility = 'hidden';
    window.time.style.visibility = 'hidden';
    clearInterval(this.popGoesThe);
    this.finished = void 0;
    Hodler.item('afterEffects').disable();
    return GameScene.__super__.uninit.call(this);
  };

  GameScene.prototype.updateScore = function() {
    return window.score.innerHTML = this.score;
  };

  GameScene.prototype.tick = function(tpf) {
    var timer;
    this.timer -= tpf;
    if (this.timer < 0) {
      timer = '0.0';
      if (this.finished == null) {
        SoundManager.play('hammer-time');
      }
      this.finished = true;
    } else {
      timer = parseFloat(Math.round(this.timer * 10) / 10).toFixed(1);
    }
    return window.time.innerHTML = timer;
  };

  GameScene.prototype.doKeyboardEvent = function(event) {};

  GameScene.prototype.doMouseEvent = function(event, raycaster) {
    var intersections, rumbles;
    if (event.type !== 'mousedown') {
      return;
    }
    if (this.timer > 0) {
      rumbles = this.moles.map(function(e) {
        return e.rumble;
      });
      intersections = raycaster.intersectObjects(rumbles, true);
      if (intersections.any()) {
        return this.hammer.hit(intersections.last());
      }
    }
  };

  return GameScene;

})(BaseScene);
