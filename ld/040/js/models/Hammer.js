// Generated by CoffeeScript 1.12.7
var Hammer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hammer = (function(superClass) {
  extend(Hammer, superClass);

  function Hammer() {
    Hammer.__super__.constructor.call(this);
    this.mesh = JsonModelManager.clone('hammer');
    this.setOpacity(0);
    this.hitting = false;
  }

  Hammer.prototype.hit = function(intersection) {
    var duration, gameScene, moleId, point;
    if (this.hitting) {
      return;
    }
    point = intersection.point;
    moleId = intersection.object.moleId;
    gameScene = Hodler.item('gameScene');
    if (this.displayCooldown != null) {
      this.displayCooldown.stop();
    }
    this.displayCooldown = new FadeModifier(gameScene.cooldown, 0.5, 0, 200).start();
    this.hitting = false;
    this.mesh.position.set(point.x, point.y + 3, point.z + 7);
    duration = 500;
    if (this.goDown != null) {
      this.goDown.stop();
    }
    this.mesh.rotation.x = 0;
    this.goDown = Helper.tween({
      duration: duration,
      mesh: this.mesh,
      kind: 'Elastic',
      direction: 'Out',
      target: {
        rX: -Math.PI / 2 + 0.2
      }
    });
    this.goDown.start();
    if (this.fadeIn != null) {
      this.fadeIn.stop();
    }
    this.fadeIn = new FadeModifier(this, 0, 0.5, 200).start();
    if (this.hitDetection != null) {
      clearTimeout(this.hitDetection);
    }
    this.hitDetection = setTimeout((function(_this) {
      return function() {
        var mole, ouchSound;
        SoundManager.play('hit');
        gameScene = Hodler.item('gameScene');
        mole = gameScene.moles.filter(function(e) {
          return e.moleId === moleId;
        }).first();
        if (mole == null) {
          return;
        }
        if (mole.hittable && mole.wasHit === false) {
          ouchSound = ['ouch1', 'ouch2', 'ouch3'].shuffle().first();
          SoundManager.volume(ouchSound, 0.2);
          SoundManager.play(ouchSound);
          mole.showStars();
          mole.animate('hit');
          gameScene.score += 1;
          mole.cancelNormalMove();
          gameScene.updateScore();
          gameScene.timer += 1;
          if (gameScene.stayTime === 400) {
            gameScene.timer -= 0.2;
          }
          if (gameScene.stayTime === 300) {
            return gameScene.timer -= 0.4;
          }
        } else {
          return gameScene.timer -= 5;
        }
      };
    })(this), duration / 3);
    if (this.reloadStuff != null) {
      clearTimeout(this.reloadStuff);
    }
    return this.reloadStuff = setTimeout((function(_this) {
      return function() {
        if (_this.fadeOut != null) {
          _this.fadeOut.stop();
        }
        _this.fadeOut = new FadeModifier(_this, 0.5, 0, 200).start();
        if (_this.backUp != null) {
          _this.backUp.stop();
        }
        _this.backUp = Helper.tween({
          duration: duration / 2,
          kind: 'Cubic',
          direction: 'Out',
          mesh: _this.mesh,
          target: {
            rX: 0
          }
        });
        _this.backUp.start();
        _this.hitting = false;
        if (_this.displayCooldown2 != null) {
          _this.displayCooldown2.stop();
        }
        return _this.displayCooldown2 = new FadeModifier(gameScene.cooldown, 0, 0.5, 200).start();
      };
    })(this), duration);
  };

  return Hammer;

})(BaseModel);
