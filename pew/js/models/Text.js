// Generated by CoffeeScript 1.12.7
var CameraShaker, Text,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Text = (function(superClass) {
  extend(Text, superClass);

  function Text() {
    Text.__super__.constructor.call(this, {
      canvasW: 128,
      canvasH: 64,
      text: '',
      fillStyle: '#fdfdfd',
      align: 'center',
      font: '54px venture',
      w: 2,
      h: 1,
      y: 15
    });
    this.id = Helper.guid();
    this.mesh.rotation.set(-Math.PI / 2, 0, -Math.PI);
    Config.scoreExtraY += 0.001;
    this.extraY = Config.scoreExtraY;
  }

  Text.prototype.tick = function(tpf) {
    if (this.mesh.material.opacity < 0) {
      PoolManager.release(this);
    }
    this.mesh.position.z += tpf;
    return this.setOpacity(this.mesh.material.opacity -= tpf);
  };

  Text.prototype.toJson = function() {
    return {
      id: this.id,
      text: this.text,
      opacity: this.mesh.material.opacity,
      mesh: {
        position: this.mesh.position.clone()
      }
    };
  };

  Text.prototype.fromJson = function(json) {
    this.setText(json.text);
    this.setOpacity(json.opacity);
    this.mesh.position.x = json.mesh.position.x;
    this.mesh.position.y = Config.scoreY + this.extraY;
    return this.mesh.position.z = json.mesh.position.z - 1;
  };

  return Text;

})(BaseText);

CameraShaker = (function() {
  function CameraShaker(camera) {
    this.shaking = false;
    this.original = {
      position: camera.position.clone(),
      rotation: camera.rotation.clone()
    };
    this.shakeDuration = 50;
    this.camera = camera;
  }

  CameraShaker.prototype.startShaking = function(i) {
    if (i > 9) {
      Helper.tween({
        mesh: this.camera,
        target: {
          x: this.original.position.x,
          y: this.original.position.y,
          z: this.original.position.z
        },
        duration: this.shakeDuration
      }).start();
      return this.shaking = false;
    } else {
      this.shaking = true;
      return setTimeout((function(_this) {
        return function(i) {
          Helper.tween({
            mesh: _this.camera,
            target: {
              x: (Helper.random(1000) - 500) / 1000,
              y: (Helper.random(1000) - 500) / 1000,
              z: (Helper.random(1000) - 500) / 1000
            },
            kind: 'Quadratic',
            direction: 'InOut',
            relative: true,
            duration: _this.shakeDuration
          }).start();
          i += 1;
          return _this.startShaking(i);
        };
      })(this), this.shakeDuration, i);
    }
  };

  CameraShaker.prototype.shakeItLikeAPolaroidPicture = function() {
    if (this.shaking) {
      return;
    }
    return this.startShaking(0);
  };

  return CameraShaker;

})();
