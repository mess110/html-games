// Generated by CoffeeScript 1.12.7
var Player,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    Player.__super__.constructor.call(this, 'green');
    this.speed = Config.defaultPlayerSpeed;
    this.skins = ['pew-bat', 'pew-dread', 'pew-hawk', 'pew-pidgeon', 'pew-asteroid', 'pew-buff'].toCyclicArray();
    this.skins.index = this.skins.items.indexOf(Persist.getDefaultShip());
    this.setModel(this.skins.get());
    this.forceBounds = false;
  }

  Player.prototype.setPosition = function(pos) {
    this.mesh.position.set(pos.x, pos.y, pos.z);
    return this.pos = {
      x: pos.x,
      y: pos.y,
      z: pos.z
    };
  };

  Player.prototype.nextModel = function() {
    this.setModel(this.skins.next());
    return Persist.setDefaultShip(this.skins.get());
  };

  Player.prototype.prevModel = function() {
    this.setModel(this.skins.prev());
    return Persist.setDefaultShip(this.skins.get());
  };

  Player.prototype.setStartPosition = function() {
    return this.setPosition({
      x: 0,
      y: 0,
      z: -4
    });
  };

  Player.prototype.tick = function(tpf) {
    var replay;
    this.move(tpf);
    this.getModelMesh().position.z = Helper.addWithMinMax(this.getModelMesh().position.z, tpf, -0.5, 0);
    this.rotate(tpf);
    if (!this.forceBounds) {
      return;
    }
    if (-Config.mapLeft - 1 > this.mesh.position.x || this.mesh.position.x > Config.mapLeft + 1) {
      replay = SceneManager.currentScene().replay;
      replay.saveFrame(tpf);
      return replay.replay();
    }
  };

  Player.prototype.reset = function() {
    this.speed = Config.defaultPlayerSpeed;
    return this.weapons.index = Config.defaultWeapon;
  };

  return Player;

})(Box);
