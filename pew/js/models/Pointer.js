// Generated by CoffeeScript 1.12.7
var Pointer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Pointer = (function(superClass) {
  extend(Pointer, superClass);

  function Pointer() {
    Pointer.__super__.constructor.call(this);
    this.mesh = Helper.plane({
      width: 1,
      height: 1,
      map: 'crosshair'
    });
    this.mesh.rotation.x = Math.PI / 2;
    this.mesh.material.transparent = true;
    this.target = 0;
    this.opacity = 0;
  }

  Pointer.prototype.toJson = function() {
    return {
      opacity: this.opacity,
      mesh: {
        position: this.mesh.position.clone(),
        rotation: this.mesh.rotation.clone()
      }
    };
  };

  Pointer.prototype.fromJson = function(json) {
    this.setOpacity(json.opacity);
    this.mesh.position.x = json.mesh.position.x;
    this.mesh.position.y = json.mesh.position.y;
    return this.mesh.position.z = json.mesh.position.z;
  };

  Pointer.prototype.show = function() {
    return this.target = 1;
  };

  Pointer.prototype.hide = function() {
    return this.target = 0;
  };

  Pointer.prototype.tick = function(tpf) {
    var modifier;
    modifier = this.opacity > this.target ? -1 : 1;
    this.opacity = Helper.addWithMinMax(this.opacity, tpf * modifier * 3, 0, 1);
    return this.setOpacity(this.opacity);
  };

  return Pointer;

})(BaseModel);
