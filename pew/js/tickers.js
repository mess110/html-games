// Generated by CoffeeScript 1.12.7
var BaseTicker, BuffTicker, EnemyTicker, ShootTicker,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseTicker = (function() {
  function BaseTicker() {
    this.passed = 0;
    this.amount = Config.defaultShotDelay;
    this.scene = SceneManager.currentScene();
    this.minTicker = Config.defaultMinTicker;
    this.maxTicker = Config.defaultMaxTicker;
  }

  BaseTicker.prototype.tick = function(tpf) {
    this.passed += tpf;
    if (this.passed > this.amount) {
      this.passed -= this.amount;
      return this.action();
    }
  };

  BaseTicker.prototype.reset = function() {
    this.passed = 0;
    return this.amount = this.originalAmount;
  };

  BaseTicker.prototype._setOriginalRate = function(amount) {
    this.amount = amount;
    return this.originalAmount = amount;
  };

  BaseTicker.prototype.getRate = function() {
    return this.amount;
  };

  BaseTicker.prototype.getOriginalRate = function() {
    return this.originalAmount;
  };

  BaseTicker.prototype.addRate = function(amount) {
    if (amount == null) {
      amount = 0.25;
    }
    this.amount = parseFloat(Helper.addWithMinMax(this.amount, amount, this.minTicker, this.maxTicker));
    return this.amount = parseFloat(this.amount.toFixed(2));
  };

  BaseTicker.prototype.action = function() {
    throw 'not implemented';
  };

  BaseTicker.prototype.isAtMinimum = function() {
    return this.amount === this.minTicker;
  };

  BaseTicker.prototype.isAtMaximum = function() {
    return this.amount === this.maxTicker;
  };

  return BaseTicker;

})();

ShootTicker = (function(superClass) {
  extend(ShootTicker, superClass);

  function ShootTicker() {
    ShootTicker.__super__.constructor.call(this);
    this._setOriginalRate(Config.defaultShotDelay);
  }

  ShootTicker.prototype.action = function() {
    if (this.scene.chicken.moving) {
      return this.shoot();
    }
  };

  ShootTicker.prototype.shoot = function() {
    return this.scene.chicken.shoot();
  };

  return ShootTicker;

})(BaseTicker);

EnemyTicker = (function(superClass) {
  extend(EnemyTicker, superClass);

  function EnemyTicker() {
    EnemyTicker.__super__.constructor.call(this);
    this._setOriginalRate(Config.defaultEnemyDelay);
    this.maxTicker = Config.maxEnemyDelay;
    this.possibleEnemies = [FlyingPunch, Truck, StaticNature, FlyingStaticWall];
  }

  EnemyTicker.prototype.action = function() {
    var nextEnemy;
    nextEnemy = this.randomEnemy();
    if (nextEnemy === StaticNature) {
      if (PoolManager.itemsInUse(nextEnemy).size() > Config.maxStaticNature) {
        nextEnemy = this.randomEnemy(StaticNature);
      }
    }
    return PoolManager.spawn(nextEnemy);
  };

  EnemyTicker.prototype.randomEnemy = function(except) {
    return this.allEnemies(except).shuffle().first();
  };

  EnemyTicker.prototype.allEnemies = function(except) {
    var exceptions, i, len, result, t, tmp;
    exceptions = [].concat(except);
    tmp = [FlyingPunch, Truck, StaticNature, FlyingStaticWall];
    result = [];
    for (i = 0, len = tmp.length; i < len; i++) {
      t = tmp[i];
      if (!exceptions.includes(t)) {
        result.push(t);
      }
    }
    return result;
  };

  return EnemyTicker;

})(BaseTicker);

BuffTicker = (function(superClass) {
  extend(BuffTicker, superClass);

  function BuffTicker() {
    this._setOriginalRate(Config.defaultBuffDelay);
  }

  BuffTicker.prototype.action = function() {
    return PoolManager.spawn(BaseBuff);
  };

  return BuffTicker;

})(BaseTicker);
