// Generated by CoffeeScript 1.10.0
var Persist;

Persist = (function() {
  Persist.PREFIX = 'ce';

  Persist.DEFAULT_SUFFIX = 'default';

  function Persist() {
    this.storage = localStorage;
  }

  Persist.prototype.setJson = function(key, value, def) {
    if (def == null) {
      def = void 0;
    }
    value = JSON.stringify(value);
    if (def != null) {
      def = JSON.stringify(def);
    }
    return this.set(key, value, def);
  };

  Persist.prototype.set = function(key, value, def) {
    if (def == null) {
      def = void 0;
    }
    if (key == null) {
      throw 'key missing';
    }
    this.storage[Persist.PREFIX + "." + key] = value;
    if (def != null) {
      return this["default"](key, def);
    }
  };

  Persist.prototype.defaultJson = function(key, value) {
    value = JSON.stringify(value);
    return this["default"](key, value);
  };

  Persist.prototype["default"] = function(key, value) {
    return this.set(key + "." + Persist.DEFAULT_SUFFIX, value);
  };

  Persist.prototype.getJson = function(key) {
    var item;
    item = this.get(key);
    if (item != null) {
      return JSON.parse(item);
    }
  };

  Persist.prototype.get = function(key) {
    var value;
    value = this._get(key);
    if (value == null) {
      return this._get(key + "." + Persist.DEFAULT_SUFFIX);
    } else {
      return value;
    }
  };

  Persist.prototype._get = function(key) {
    var value;
    if (key == null) {
      throw 'key missing';
    }
    value = this.storage[Persist.PREFIX + "." + key];
    if (isNumeric(value)) {
      return Number(value);
    }
    if (['true', 'false'].includes(value)) {
      return Boolean(value);
    }
    if (value === 'undefined') {
      return void 0;
    }
    return value;
  };

  Persist.prototype.rm = function(key) {
    if (key == null) {
      throw 'key missing';
    }
    return this.storage.removeItem(Persist.PREFIX + "." + key);
  };

  Persist.prototype.clear = function(exceptions, withDefaults) {
    var results, storage;
    if (exceptions == null) {
      exceptions = [];
    }
    if (withDefaults == null) {
      withDefaults = false;
    }
    if (!(exceptions instanceof Array)) {
      exceptions = [exceptions];
    }
    results = [];
    for (storage in this.storage) {
      if (storage.endsWith("." + Persist.DEFAULT_SUFFIX) && withDefaults === false) {
        continue;
      }
      if (!exceptions.includes(storage)) {
        results.push(this.rm(storage));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Persist.getJson = function(key) {
    return new Persist().getJson(key);
  };

  Persist.get = function(key) {
    return new Persist().get(key);
  };

  Persist.setJson = function(key, value, def) {
    return new Persist().setJson(key, value, def);
  };

  Persist.set = function(key, value, def) {
    return new Persist().set(key, value, def);
  };

  Persist["default"] = function(key, value) {
    return new Persist()["default"](key, value);
  };

  Persist.defaultJson = function(key, value) {
    return new Persist().defaultJson(key, value);
  };

  Persist.rm = function(key) {
    return new Persist().rm(key);
  };

  Persist.clear = function(exceptions, withDefaults) {
    return new Persist().clear(exceptions, withDefaults);
  };

  return Persist;

})();
